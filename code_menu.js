

//btn1 = document.getElementById("code_content");
function displayCode_Define() {
    var btn1 = document.getElementById("code_content");

    btn1.innerHTML = "\/*Define CONSTANTS*\/\r\n\r\nSIZE = 50;\r\nWHITE = \'w\';\r\nBLACK = \'b\';\r\nTCOLOR = \"\";\r\nCOLOR_WHITE = \"#ffffff\";\r\nCOLOR_ORANGE = \"#ff8e00\";\r\nCOLOR_GRIS = \"#918b7a\";\r\nCOLOR_LIGHTGRIS = \"#bab39e\";\r\nPLAYER = [\"WHITE\", \"BLACK\"];\r\nPLAYER_TYPE = [WHITE, BLACK];\r\nBOARD = [\r\n    [\'br\',\'bn\',\'bb\',\'bq\',\'bk\',\'bb\',\'bn\',\'br\'],\r\n    [\'bp\',\'bp\',\'bp\',\'bp\',\'bp\',\'bp\',\'bp\',\'bp\'],\r\n    [\'  \',\'  \',\'  \',\'  \',\'  \',\'  \',\'  \',\'  \'],\r\n    [\'  \',\'  \',\'  \',\'  \',\'  \',\'  \',\'  \',\'  \'],\r\n    [\'  \',\'  \',\'  \',\'  \',\'  \',\'  \',\'  \',\'  \'],\r\n    [\'  \',\'  \',\'  \',\'  \',\'  \',\'  \',\'  \',\'  \'],\r\n    [\'wp\',\'wp\',\'wp\',\'wp\',\'wp\',\'wp\',\'wp\',\'wp\'],\r\n    [\'wr\',\'wn\',\'wb\',\'wq\',\'wk\',\'wb\',\'wn\',\'wr\']\r\n];\r\n\r\n\r\nSRC_PIECES = {\r\n    \'br\': \"assets\/black_rook.png\",\r\n    \'bn\': \"assets\/black_knight.png\",\r\n    \'bb\': \"assets\/black_bishop.png\",\r\n    \'bq\': \"assets\/black_queen.png\",\r\n    \'bk\': \"assets\/black_king.png\",\r\n    \'bp\': \"assets\/black_pawn.png\",\r\n    \'wr\': \"assets\/white_rook.png\",\r\n    \'wn\': \"assets\/white_knight.png\",\r\n    \'wb\': \"assets\/white_bishop.png\",\r\n    \'wq\': \"assets\/white_queen.png\",\r\n    \'wk\': \"assets\/white_king.png\",\r\n    \'wp\': \"assets\/white_pawn.png\"\r\n};";
}

function displayCode_Game() {
    var btn1 = document.getElementById("code_content");

    btn1.innerHTML = "\/*Class Game initializes Board, plays and controls the game*\/\r\n\r\nclass Game {\r\n    constructor() {\r\n        this.canvas = document.getElementById(\"canvas\");\r\n        this.context = this.canvas.getContext(\"2d\");        \r\n        \r\n        this.board = new Board(this.context);\r\n        this.cboard = this.board.simulation;\r\n        this.AI = new AI(this.canvas, this.context);\r\n        this.TURN = 0;  \/\/ 0 = White \/ 1 = Black\r\n        this.MOVE = {   originX: 0,\r\n                        originY: 0,\r\n                        targetX: 0, \r\n                        targetY: 0  };\r\n        this.STAGE = 0;        \r\n        this.debugMode = false;\r\n        this.moves = [];        \r\n    }\r\n\r\n    handlerClick(that, e) {\r\n        var elemLeft = that.canvas.offsetLeft + that.canvas.clientLeft;\r\n        var elemTop = that.canvas.offsetTop + that.canvas.clientTop;\r\n        var px = Math.floor((e.pageY - elemTop) \/ SIZE);\r\n        var py = Math.floor((e.pageX - elemLeft)\/ SIZE);\r\n\r\n        if (that.debugMode)\r\n            console.log(that.board.simulation[px][py], px, py);\r\n            \r\n        if (this.STAGE == 0 && this.preCondSelectedS1(px, py)) {\r\n            this.processSelectedS1(this.board, px, py);\r\n            if (this.debugMode)\r\n                this.board.printBoardSimulation();\r\n        }\r\n        else if (this.STAGE == 1 && this.preCondSelectedS2(px, py)) {\r\n            this.processSelectedS2(px, py);\r\n            if (this.debugMode)\r\n                this.board.printBoardSimulation();\r\n        }\r\n    }    \r\n\r\n    init() {\r\n        var that = this;\r\n        this.canvas.addEventListener(\"click\", (function(e) {\r\n            that.handlerClick(that, e);\r\n        }));\r\n        \r\n        this.board.printBoardSimulation();\r\n        this.board.draw(true);\r\n    }\r\n\r\n    update() {\r\n        this.context.clearRect(0,0,400,400);\r\n\r\n        this.board.draw(true);\r\n    }";
}

function displayCode_King() {
    var btn1 = document.getElementById("code_content");

    btn1.innerHTML = "\/*Class King inherits from Class Piece*\/\r\n\r\nclass King extends Piece {\r\n            constructor(context, key, x, y) {\r\n                super(context, key, x, y);\r\n            }\r\n        \r\n            move(board, x, y, moves) {\r\n                var cells = [[-1,-1],[-1,1],[1,-1],[1,1],[-1,0],[1,0],[0,-1],[0,1]];       \r\n                this.defaultOnceMove(board,x,y,cells, moves);\r\n            }\r\n        }";
}

function displayCode_Piece() {
    var btn1 = document.getElementById("code_content");

    btn1.innerHTML = "class Piece {\r\n    constructor (context, key, x, y) {\r\n        if (this.constructor == Piece) {\r\n            throw new Error(\"Abstract Piece!\");\r\n        }\r\n        this.context = context;\r\n        this.key = key;\r\n        this.img = resources.get(SRC_PIECES[key]);\r\n        this.x = x;\r\n        this.y = y;\r\n        this.type = key[0];\r\n    }\r\n\r\n    draw() {\r\n        this.context.drawImage(this.img, this.y * SIZE, this.x * SIZE);\r\n    }\r\n\r\n    setPosition(x, y) {\r\n        this.x = x;\r\n        this.y = y;\r\n    }\r\n\r\n    move() {\r\n        throw new Error(\"move() must be implemented\");\r\n    }\r\n\r\n    defaultLoopMove(board, px, py, cells, moves) {\r\n        var that = this;\r\n        cells.forEach((function(c) {\r\n            var x = px+c[0], y = py+c[1];\r\n            while (preCondCoord(x,y) && board.cells[x][y].contain == null) {\r\n                moves.push([x,y]);\r\n                x += c[0];\r\n                y += c[1];\r\n            }\r\n            if (preCondCoord(x,y) && board.cells[x][y].contain && board.cells[x][y].contain.type != that.type) {\r\n                moves.push([x,y]);\r\n            }\r\n        }));\r\n    }\r\n    \r\n    defaultOnceMove(board, px, py, cells, moves) {\r\n        var that = this;\r\n        cells.forEach((function(c) {\r\n            var x = px + c[0], y = py + c[1];\r\n            if (preCondCoord(x, y)) {\r\n                if (board.cells[x][y].contain == null) {\r\n                    moves.push([x,y]);\r\n                }\r\n                else if (board.cells[x][y].contain && board.cells[x][y].contain.type != that.type) {\r\n                    moves.push([x,y]);\r\n                }\r\n            }\r\n        }));\r\n    }\r\n\r\n}";
}

function displayCode_Board() {
    var btn1 = document.getElementById("code_content");

    btn1.innerHTML = "\/*Board contains a list of 64 Cells*\/\r\n\r\nclass Board {\r\n    constructor(context) {\r\n        this.context = context;\r\n        this.simulation = BOARD;\r\n        this.pieces = [];\r\n        this.bpieces = [];\r\n        this.wpieces = [];\r\n        this.cells = this.initCells();\r\n        this.EN_PASSANT = [[0,0,0,0,0,0,0,0],[0,0,0,0,0,0,0,0]];\r\n        this.CASTLE_K = [1,1]; \/\/ 0 = White \/ 1 = Black\r\n        this.CASTLE_Q = [1,1]; \/\/ 0 = White \/ 1 = Black\r\n    }\r\n\r\n    initCells() {\r\n        var cells = [];\r\n        var tmp = [], color, tcolor, piece;\r\n        for (var i = 0; i < 8; i++) {\r\n            tmp = [];\r\n            for (var j = 0; j < 8; j++) {\r\n                color = ((i+j)%2) ? COLOR_ORANGE : COLOR_WHITE;\r\n                tcolor = ((i+j)%2) ? COLOR_GRIS : COLOR_LIGHTGRIS;\r\n                piece = (this.simulation[i][j] == \'  \') ? null : this.initPiece(this.context,this.simulation[i][j], i, j);\r\n                tmp.push(new Cell(this.context, i, j, piece, color, tcolor));\r\n                if (piece) {\r\n                    this.pieces.push(piece);\r\n                    if (piece.type == WHITE)\r\n                        this.wpieces.push(piece);\r\n                    else if (piece.type == BLACK)\r\n                        this.bpieces.push(piece);\r\n                }\r\n            }\r\n            cells.push(tmp);\r\n        }\r\n        return cells;\r\n    }\r\n\r\n    initPiece(context, key, x, y) {\r\n        switch(key[1]) {\r\n            case \'p\':\r\n                return new Pawn(context, key, x, y); \r\n            case \'r\':\r\n                return new Rook(context, key, x, y); \r\n            case \'n\':\r\n                return new Knight(context, key, x, y); \r\n            case \'b\':\r\n                return new Bishop(context, key, x, y); \r\n            case \'q\':\r\n                return new Queen(context, key, x, y); \r\n            case \'k\':\r\n                return new King(context, key, x, y); \r\n            default:\r\n                return null;\r\n        }\r\n    }\r\n    \r\n    printBoardSimulation() {\r\n        for (var i = 0; i < 8; i++) {\r\n            console.log(this.simulation[i]);\r\n        }\r\n    }\r\n\r\n    draw(flag) {\r\n        for (var i = 0; i < 8; i++) \r\n            for (var j = 0; j < 8; j++) {\r\n                this.cells[i][j].draw();\r\n                if (flag && this.cells[i][j].contain != null) {\r\n                    this.cells[i][j].contain.draw();\r\n                }\r\n        }\r\n    }\r\n}";
}

function displayCode_Cell() {
    var btn1 = document.getElementById("code_content");

    btn1.innerHTML = "\/*Cell can contain a Piece or null*\/\r\n\r\nclass Cell {\r\n    constructor(context, x, y, piece, color, tcolor) {\r\n        this.context = context;\r\n        this.color = color;\r\n        this.tcolor = tcolor;\r\n        this.x = x;\r\n        this.y = y;\r\n        this.contain = piece;\r\n        this.marked = false;\r\n        this.threated = false;\r\n        this.en_passant = false;\r\n        this.castle_k = false;\r\n        this.castle_q = false;\r\n    }\r\n\r\n    draw() {\r\n        this.context.fillStyle = (!this.marked) ? this.color : this.tcolor;\r\n        this.context.fillRect(this.y * SIZE, this.x * SIZE, SIZE, SIZE);\r\n    }\r\n}";
}

function displayCode_Queen() {
    var btn1 = document.getElementById("code_content");

    btn1.innerHTML = "\/*Class Queen inherits from Class Piece*\/\r\n\r\nclass Queen extends Piece {\r\n    constructor(context, key, x, y) {\r\n        super(context, key, x, y);\r\n    }\r\n\r\n    move(board, x, y, moves) {\r\n        var cells = [[-1,-1],[-1,1],[1,-1],[1,1],[-1,0],[1,0],[0,-1],[0,1]];\r\n        this.defaultLoopMove(board,x,y,cells, moves);\r\n    }\r\n}";
}

function displayCode_Pawn() {
    var btn1 = document.getElementById("code_content");

    btn1.innerHTML = "\/*Class Pawn inherits from Class Piece*\/\r\n\r\nclass Pawn extends Piece {\r\n    constructor(context, key, x, y) {\r\n        super(context, key, x, y);\r\n    }\r\n\r\n    move(board, x, y, moves) {\r\n        var pInit = 6, z = -1, op = BLACK;\r\n    if (this.type == BLACK) {\r\n        pInit = 1; z = 1; op = WHITE;\r\n    }\r\n    var k = x + z;\r\n    if (x == pInit) {        \r\n        if (board.cells[k][y].contain == null) {\r\n            if (board.cells[k+z][y].contain == null) {                \r\n                moves.push([k,y]);\r\n                moves.push([k+z,y]);\r\n            }\r\n            else {\r\n                moves.push([k, y]);\r\n            }\r\n        }\r\n    } else if (preCondCoord(k, y) && board.cells[k][y].contain == null) \r\n        moves.push([k, y]);\r\n    var cc = [-1,1];\r\n    var t = (op == WHITE) ? 0 : 1;\r\n    cc.forEach((function(c) {\r\n        if (preCondCoord(k, y+c) && board.cells[k][y+c].contain && board.cells[k][y+c].contain.type != board.cells[x][y].contain.type) {\r\n            moves.push([k, y+c]);\r\n        }\r\n\r\n        if (preCondCoord(k, y+c) && preCondCoord(x, y+c) && board.cells[x][y+c].contain && board.cells[x][y+c].contain.type == op \r\n        && board.cells[k][y+c].contain == null && board.EN_PASSANT[t][y+c]) {\r\n            moves.push([k, y+c]);\r\n            board.cells[k][y+c].en_passant = true;\r\n        }\r\n    }));\r\n\r\n    }\r\n}";
}

function displayCode_v5() {
    var btn1 = document.getElementById("code_content");

    btn1.innerHTML = "\/*\r\n * TO DO LIST:\r\n * - Implement AI playing Black pieces (Algo Minimax)\r\n * - Implement Openning Book\r\n *\/\r\n\r\nvar canvas = document.getElementById(\"canvas\");\r\nvar context = canvas.getContext(\"2d\");\r\n\r\nvar game = null;\r\n\r\nfunction init() {\r\n    game = new Game();\r\n\r\n    game.init();\r\n    \/\/ game.initAI();\r\n\r\n    window.requestAnimationFrame(update);\r\n}\r\n\r\nfunction update() {\r\n    \r\n    game.update();\r\n    \/\/ game.updateAI();\r\n    \r\n    window.requestAnimationFrame(update);\r\n}\r\n\r\nfunction player1VSplayer2() {\r\n    \r\n    resources.onReady(that.init());\r\n}\r\n\r\nfunction menu() {\r\n    var boardInit = new Board(context);\r\n    boardInit.draw(false);    \r\n}\r\n\r\n\/\/resources.onReady(menu);\r\nresources.onReady(init);";
}